{
  "files": {
    "index.js": "const express = require('express');\nconst cors = require('cors');\nconst SrtParser = require('srt-parser-2');\nconst { addonBuilder, getRouter } = require('stremio-addon-sdk');\nconst fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));\n\nconst OS_API_KEY = 'QM8wTqv1wrBh2ttby7peXbL1nZGWDk2N';\nconst OS_USERNAME = 'nil3190';\nconst OS_PASSWORD = '9881912126';\nconst USER_AGENT = 'SimpleStremioSubtitles v5.6.0';\nconst API_URL = 'https://api.opensubtitles.com/api/v1';\n\nlet authToken = null;\n\nasync function loginToOpenSubtitles() {\n    if (authToken) return true;\n    console.log('Attempting to log into OpenSubtitles...');\n    try {\n        const response = await fetch(`${API_URL}/login`, {\n            method: 'POST',\n            headers: { \n                'Content-Type': 'application/json', \n                'Api-Key': OS_API_KEY,\n                'User-Agent': USER_AGENT \n            },\n            body: JSON.stringify({ username: OS_USERNAME, password: OS_PASSWORD })\n        });\n        const data = await response.json();\n        if (data.token) {\n            authToken = data.token;\n            console.log('Successfully logged into OpenSubtitles.');\n            return true;\n        }\n        console.error('Failed to log into OpenSubtitles:', data);\n        return false;\n    } catch (error) {\n        console.error('Error during OpenSubtitles login:', error);\n        return false;\n    }\n}\n\nasync function searchSubtitles(imdbId, season, episode) {\n    let query = `imdb_id=${imdbId}&languages=en,hu`;\n    if (season && episode) {\n        query += `&season_number=${season}&episode_number=${episode}`;\n    }\n    console.log(`Searching for subtitles with query: ${query}`);\n    try {\n        const response = await fetch(`${API_URL}/subtitles?${query}`, {\n            headers: { \n                'Api-Key': OS_API_KEY, \n                'Authorization': `Bearer ${authToken}`,\n                'User-Agent': USER_AGENT\n            }\n        });\n        const data = await response.json();\n        return data.data || [];\n    } catch (error) {\n        console.error('Error searching subtitles:', error);\n        return [];\n    }\n}\n\nasync function getSubtitleContent(fileId) {\n    try {\n        console.log(`Requesting download link for file ID: ${fileId}`);\n        const downloadResponse = await fetch(`${API_URL}/download`, {\n            method: 'POST',\n            headers: { \n                'Content-Type': 'application/json', \n                'Api-Key': OS_API_KEY, \n                'Authorization': `Bearer ${authToken}`,\n                'User-Agent': USER_AGENT\n            },\n            body: JSON.stringify({ file_id: fileId })\n        });\n        const downloadData = await downloadResponse.json();\n        if (!downloadData.link) {\n            console.error(`No download link found for file ID ${fileId}`);\n            return null;\n        }\n        console.log(`Downloading SRT content for file ID ${fileId}`);\n        const srtResponse = await fetch(downloadData.link);\n        return await srtResponse.text();\n    } catch (error) {\n        console.error(`Failed to download subtitle for file ID ${fileId}:`, error);\n        return null;\n    }\n}\n\nfunction mergeSubtitles(srtA, srtB) {\n    console.log('Merging subtitle files into a two-line format...');\n    const srtParser = new SrtParser.default();\n    const subsA = srtParser.fromSrt(srtA);\n    const subsB = srtParser.fromSrt(srtB);\n    const merged = [];\n    const subsBMap = new Map(subsB.map(sub => [sub.startTime, sub]));\n\n    subsA.forEach(subA => {\n        const subB = subsBMap.get(subA.startTime);\n        const combinedText = `${subA.text}\\n${subB ? subB.text : ''}`;\n        merged.push({ ...subA, text: combinedText });\n        if (subB) subsBMap.delete(subA.startTime);\n    });\n\n    subsBMap.forEach(subB => {\n        merged.push({ ...subB, text: `\\n${subB.text}` });\n    });\n\n    merged.sort((a, b) => {\n        const timeToMs = time => time.split(/[:,]/).reduce((acc, val, i) => acc + Number(val) * [3600000, 60000, 1000, 1][i], 0);\n        return timeToMs(a.startTime) - timeToMs(b.startTime);\n    });\n\n    merged.forEach((sub, index) => sub.id = (index + 1).toString());\n    console.log('Merging complete.');\n    return srtParser.toSrt(merged);\n}\n\nfunction convertSrtToVtt(srtText) {\n    console.log('Converting merged SRT to VTT format...');\n    let vttText = \"WEBVTT\\n\\n\" + srtText\n        .replace(/(\\d{2}:\\d{2}:\\d{2}),(\\d{3})/g, '$1.$2')\n        .replace(/\\r\\n/g, '\\n')\n        .replace(/\\n{3,}/g, '\\n\\n');\n    console.log('VTT conversion complete.');\n    return vttText;\n}\n\nconst manifest = {\n    id: 'org.simple.dualsubtitles.fixed',\n    version: '5.6.0',\n    name: 'Dual Subtitles (EN+HU) Fixed',\n    description: 'Fetches and merges English and Hungarian subtitles into a two-line format.',\n    resources: ['subtitles'],\n    types: ['movie', 'series'],\n    idPrefixes: ['tt'],\n    catalogs: []\n};\n\nconst builder = new addonBuilder(manifest);\n\nbuilder.defineSubtitlesHandler(async (args) => {\n    const { type, id } = args;\n    console.log(`\\n--- New Subtitle Request (SDK Handler) ---`);\n    console.log(`Received request for ${type} with id ${id}`);\n\n    if (!await loginToOpenSubtitles()) {\n        return Promise.resolve({ subtitles: [] });\n    }\n\n    const parts = id.split(':');\n    const imdbId = parts[0].replace('tt', '');\n    const season = type === 'series' ? parts[1] : null;\n    const episode = type === 'series' ? parts[2] : null;\n\n    const searchResults = await searchSubtitles(imdbId, season, episode);\n\n    if (searchResults.length === 0) {\n        console.log('No subtitles found on OpenSubtitles for this content.');\n        return Promise.resolve({ subtitles: [] });\n    }\n\n    const englishSubs = searchResults.filter(s => s.attributes.language === 'en').slice(0, 5);\n    const hungarianSubs = searchResults.filter(s => s.attributes.language === 'hu').slice(0, 5);\n\n    if (englishSubs.length === 0 || hungarianSubs.length === 0) {\n        console.log('Could not find subtitles for both languages in the top results.');\n        return Promise.resolve({ subtitles: [] });\n    }\n\n    console.log(`Found ${englishSubs.length} English and ${hungarianSubs.length} Hungarian subs to process.`);\n    \n    const efficientPairs = [];\n    const maxPairs = Math.min(englishSubs.length, hungarianSubs.length);\n    for (let i = 0; i < maxPairs; i++) {\n        efficientPairs.push({\n            enFileId: englishSubs[i].attributes.files[0].file_id,\n            huFileId: hungarianSubs[i].attributes.files[0].file_id,\n            releaseName: englishSubs[i].attributes.release || `Release #${i + 1}`\n        });\n    }\n\n    console.log(`Created ${efficientPairs.length} efficient subtitle pairs to process.`);\n    \n    const subtitlePromises = efficientPairs.map(async (pair) => {\n        console.log(`Processing pair: EN File ID ${pair.enFileId}, HU File ID ${pair.huFileId}`);\n        const [srtA, srtB] = await Promise.all([\n            getSubtitleContent(pair.enFileId),\n            getSubtitleContent(pair.huFileId)\n        ]);\n\n        if (!srtA || !srtB) {\n            console.log(`Failed to download one or both subtitles for pair EN:${pair.enFileId}, HU:${pair.huFileId}`);\n            return null;\n        }\n\n        const mergedSrt = mergeSubtitles(srtA, srtB);\n        const vtt = convertSrtToVtt(mergedSrt);\n\n        return {\n            id: `merged-${pair.enFileId}-${pair.huFileId}`,\n            url: `data:text/vtt;base64,${Buffer.from(vtt).toString('base64')}`,\n            lang: `dual (EN+HU) - ${pair.releaseName}`\n        };\n    });\n\n    const subtitles = (await Promise.all(subtitlePromises)).filter(Boolean);\n\n    console.log(`Successfully processed and are now offering ${subtitles.length} merged subtitle options.`);\n    console.log(`--- End of Request ---`);\n    return Promise.resolve({ subtitles });\n});\n\nconst app = express();\napp.use(cors());\nconst router = getRouter(builder.getInterface());\napp.use(router);\n\n// This is the entry point for Vercel\nmodule.exports = app;\n",
    "package.json": {
      "name": "stremio-dual-subtitle-addon",
      "version": "1.0.0",
      "main": "index.js",
      "dependencies": {
        "express": "^4.18.2",
        "cors": "^2.8.5",
        "srt-parser-2": "^1.1.7",
        "stremio-addon-sdk": "^1.6.10",
        "node-fetch": "^3.3.0"
      }
    },
    "vercel.json": {
      "version": 2,
      "builds": [
        {
          "src": "index.js",
          "use": "@vercel/node"
        }
      ],
      "routes": [
        {
          "src": "/(.*)",
          "dest": "index.js"
        }
      ]
    },
    "README.md": "# Vercel Deployment Steps\n\n1.  **Create a GitHub Account**: If you don't have one, sign up at [github.com](https://github.com).\n\n2.  **Create a New Repository**: Create a new, public repository on GitHub. Name it something like `stremio-dual-subtitle-addon`.\n\n3.  **Upload Files**: Upload the three files from this project (`index.js`, `package.json`, and `vercel.json`) to your new GitHub repository.\n\n4.  **Create a Vercel Account**: Sign up for a free account at [vercel.com](https://vercel.com) using your GitHub account.\n\n5.  **Import Your Project**: On your Vercel dashboard, click \"Add New...\" -> \"Project\". Find your GitHub repository and click \"Import\".\n\n6.  **Deploy**: Vercel will automatically detect the settings from `vercel.json`. Just click the \"Deploy\" button.\n\n7.  **Get Your Permanent URL**: Once the deployment is finished (it usually takes about a minute), Vercel will give you your permanent public URL (e.g., `https://your-project-name.vercel.app`).\n\n8.  **Install in Stremio**: Add `/manifest.json` to the end of your Vercel URL and paste it into the Stremio search bar to install your permanent addon."
  }
}
